/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { UploadFile } from '../models';
import { UploadFileFromJSON, UploadFileToJSON } from '../models';

export interface UploadFilesIdDeleteRequest {
  id: string;
}

export interface UploadFilesIdGetRequest {
  id: string;
}

export interface UploadPostRequest {
  files: Array<Blob>;
  path?: string;
  refId?: string;
  ref?: string;
  field?: string;
}

/**
 *
 */
export class UploadFileApi extends runtime.BaseAPI {
  /**
   */
  async uploadFilesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UploadFile>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/upload/files`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UploadFileFromJSON));
  }

  /**
   */
  async uploadFilesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UploadFile>> {
    const response = await this.uploadFilesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async uploadFilesIdDeleteRaw(
    requestParameters: UploadFilesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadFile>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling uploadFilesIdDelete.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/upload/files/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UploadFileFromJSON(jsonValue));
  }

  /**
   */
  async uploadFilesIdDelete(
    requestParameters: UploadFilesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadFile> {
    const response = await this.uploadFilesIdDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async uploadFilesIdGetRaw(
    requestParameters: UploadFilesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UploadFile>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling uploadFilesIdGet.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/upload/files/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UploadFileFromJSON(jsonValue));
  }

  /**
   */
  async uploadFilesIdGet(
    requestParameters: UploadFilesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UploadFile> {
    const response = await this.uploadFilesIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Upload files
   *
   */
  async uploadPostRaw(
    requestParameters: UploadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UploadFile>>> {
    if (requestParameters.files === null || requestParameters.files === undefined) {
      throw new runtime.RequiredError(
        'files',
        'Required parameter requestParameters.files was null or undefined when calling uploadPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.path !== undefined) {
      formParams.append('path', requestParameters.path as any);
    }

    if (requestParameters.refId !== undefined) {
      formParams.append('refId', requestParameters.refId as any);
    }

    if (requestParameters.ref !== undefined) {
      formParams.append('ref', requestParameters.ref as any);
    }

    if (requestParameters.field !== undefined) {
      formParams.append('field', requestParameters.field as any);
    }

    if (requestParameters.files) {
      requestParameters.files.forEach((element) => {
        formParams.append('files', element as any);
      });
    }

    const response = await this.request(
      {
        path: `/upload`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UploadFileFromJSON));
  }

  /**
   * Upload files
   *
   */
  async uploadPost(
    requestParameters: UploadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UploadFile>> {
    const response = await this.uploadPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
