/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  GetAboutPopulateParameter,
  UpdateListResponse,
  UpdateLocalizationRequest,
  UpdateLocalizationResponse,
  UpdateRequest,
  UpdateResponse,
} from '../models';
import {
  GetAboutPopulateParameterFromJSON,
  GetAboutPopulateParameterToJSON,
  UpdateListResponseFromJSON,
  UpdateListResponseToJSON,
  UpdateLocalizationRequestFromJSON,
  UpdateLocalizationRequestToJSON,
  UpdateLocalizationResponseFromJSON,
  UpdateLocalizationResponseToJSON,
  UpdateRequestFromJSON,
  UpdateRequestToJSON,
  UpdateResponseFromJSON,
  UpdateResponseToJSON,
} from '../models';

export interface DeleteUpdatesIdRequest {
  id: number;
}

export interface GetUpdatesRequest {
  sort?: string;
  paginationWithCount?: boolean;
  paginationPage?: number;
  paginationPageSize?: number;
  paginationStart?: number;
  paginationLimit?: number;
  fields?: string;
  populate?: GetAboutPopulateParameter;
  filters?: object;
  locale?: string;
}

export interface GetUpdatesIdRequest {
  id: number;
}

export interface PostUpdatesRequest {
  updateRequest: UpdateRequest;
}

export interface PostUpdatesIdLocalizationsRequest {
  id: number;
  updateLocalizationRequest: UpdateLocalizationRequest;
}

export interface PutUpdatesIdRequest {
  id: number;
  updateRequest: UpdateRequest;
}

/**
 *
 */
export class UpdateApi extends runtime.BaseAPI {
  /**
   */
  async deleteUpdatesIdRaw(
    requestParameters: DeleteUpdatesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteUpdatesId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/updates/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async deleteUpdatesId(
    requestParameters: DeleteUpdatesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.deleteUpdatesIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getUpdatesRaw(
    requestParameters: GetUpdatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateListResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    if (requestParameters.paginationWithCount !== undefined) {
      queryParameters['pagination[withCount]'] = requestParameters.paginationWithCount;
    }

    if (requestParameters.paginationPage !== undefined) {
      queryParameters['pagination[page]'] = requestParameters.paginationPage;
    }

    if (requestParameters.paginationPageSize !== undefined) {
      queryParameters['pagination[pageSize]'] = requestParameters.paginationPageSize;
    }

    if (requestParameters.paginationStart !== undefined) {
      queryParameters['pagination[start]'] = requestParameters.paginationStart;
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination[limit]'] = requestParameters.paginationLimit;
    }

    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }

    if (requestParameters.populate !== undefined) {
      queryParameters['populate'] = requestParameters.populate;
    }

    if (requestParameters.filters !== undefined) {
      queryParameters['filters'] = requestParameters.filters;
    }

    if (requestParameters.locale !== undefined) {
      queryParameters['locale'] = requestParameters.locale;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/updates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateListResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getUpdates(
    requestParameters: GetUpdatesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateListResponse> {
    const response = await this.getUpdatesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getUpdatesIdRaw(
    requestParameters: GetUpdatesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getUpdatesId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/updates/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UpdateResponseFromJSON(jsonValue));
  }

  /**
   */
  async getUpdatesId(
    requestParameters: GetUpdatesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateResponse> {
    const response = await this.getUpdatesIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postUpdatesRaw(
    requestParameters: PostUpdatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateResponse>> {
    if (requestParameters.updateRequest === null || requestParameters.updateRequest === undefined) {
      throw new runtime.RequiredError(
        'updateRequest',
        'Required parameter requestParameters.updateRequest was null or undefined when calling postUpdates.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/updates`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateRequestToJSON(requestParameters.updateRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UpdateResponseFromJSON(jsonValue));
  }

  /**
   */
  async postUpdates(
    requestParameters: PostUpdatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateResponse> {
    const response = await this.postUpdatesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postUpdatesIdLocalizationsRaw(
    requestParameters: PostUpdatesIdLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateLocalizationResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling postUpdatesIdLocalizations.'
      );
    }

    if (
      requestParameters.updateLocalizationRequest === null ||
      requestParameters.updateLocalizationRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'updateLocalizationRequest',
        'Required parameter requestParameters.updateLocalizationRequest was null or undefined when calling postUpdatesIdLocalizations.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/updates/{id}/localizations`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateLocalizationRequestToJSON(requestParameters.updateLocalizationRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateLocalizationResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postUpdatesIdLocalizations(
    requestParameters: PostUpdatesIdLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateLocalizationResponse> {
    const response = await this.postUpdatesIdLocalizationsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async putUpdatesIdRaw(
    requestParameters: PutUpdatesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putUpdatesId.'
      );
    }

    if (requestParameters.updateRequest === null || requestParameters.updateRequest === undefined) {
      throw new runtime.RequiredError(
        'updateRequest',
        'Required parameter requestParameters.updateRequest was null or undefined when calling putUpdatesId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/updates/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateRequestToJSON(requestParameters.updateRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UpdateResponseFromJSON(jsonValue));
  }

  /**
   */
  async putUpdatesId(
    requestParameters: PutUpdatesIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateResponse> {
    const response = await this.putUpdatesIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
