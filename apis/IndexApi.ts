/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  GetArtistsPopulateParameter,
  IndexLocalizationRequest,
  IndexLocalizationResponse,
  IndexRequest,
  IndexResponse,
} from '../models';
import {
  GetArtistsPopulateParameterFromJSON,
  GetArtistsPopulateParameterToJSON,
  IndexLocalizationRequestFromJSON,
  IndexLocalizationRequestToJSON,
  IndexLocalizationResponseFromJSON,
  IndexLocalizationResponseToJSON,
  IndexRequestFromJSON,
  IndexRequestToJSON,
  IndexResponseFromJSON,
  IndexResponseToJSON,
} from '../models';

export interface GetIndexRequest {
  sort?: string;
  paginationWithCount?: boolean;
  paginationPage?: number;
  paginationPageSize?: number;
  paginationStart?: number;
  paginationLimit?: number;
  fields?: string;
  populate?: GetArtistsPopulateParameter;
  filters?: object;
  locale?: string;
}

export interface PostIndexLocalizationsRequest {
  indexLocalizationRequest: IndexLocalizationRequest;
}

export interface PutIndexRequest {
  indexRequest: IndexRequest;
}

/**
 *
 */
export class IndexApi extends runtime.BaseAPI {
  /**
   */
  async deleteIndexRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/index`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async deleteIndex(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
    const response = await this.deleteIndexRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getIndexRaw(
    requestParameters: GetIndexRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<IndexResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    if (requestParameters.paginationWithCount !== undefined) {
      queryParameters['pagination[withCount]'] = requestParameters.paginationWithCount;
    }

    if (requestParameters.paginationPage !== undefined) {
      queryParameters['pagination[page]'] = requestParameters.paginationPage;
    }

    if (requestParameters.paginationPageSize !== undefined) {
      queryParameters['pagination[pageSize]'] = requestParameters.paginationPageSize;
    }

    if (requestParameters.paginationStart !== undefined) {
      queryParameters['pagination[start]'] = requestParameters.paginationStart;
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination[limit]'] = requestParameters.paginationLimit;
    }

    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }

    if (requestParameters.populate !== undefined) {
      queryParameters['populate'] = requestParameters.populate;
    }

    if (requestParameters.filters !== undefined) {
      queryParameters['filters'] = requestParameters.filters;
    }

    if (requestParameters.locale !== undefined) {
      queryParameters['locale'] = requestParameters.locale;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/index`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IndexResponseFromJSON(jsonValue));
  }

  /**
   */
  async getIndex(
    requestParameters: GetIndexRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<IndexResponse> {
    const response = await this.getIndexRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postIndexLocalizationsRaw(
    requestParameters: PostIndexLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<IndexLocalizationResponse>> {
    if (
      requestParameters.indexLocalizationRequest === null ||
      requestParameters.indexLocalizationRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'indexLocalizationRequest',
        'Required parameter requestParameters.indexLocalizationRequest was null or undefined when calling postIndexLocalizations.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/index/localizations`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IndexLocalizationRequestToJSON(requestParameters.indexLocalizationRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IndexLocalizationResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postIndexLocalizations(
    requestParameters: PostIndexLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<IndexLocalizationResponse> {
    const response = await this.postIndexLocalizationsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async putIndexRaw(
    requestParameters: PutIndexRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<IndexResponse>> {
    if (requestParameters.indexRequest === null || requestParameters.indexRequest === undefined) {
      throw new runtime.RequiredError(
        'indexRequest',
        'Required parameter requestParameters.indexRequest was null or undefined when calling putIndex.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/index`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IndexRequestToJSON(requestParameters.indexRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IndexResponseFromJSON(jsonValue));
  }

  /**
   */
  async putIndex(
    requestParameters: PutIndexRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<IndexResponse> {
    const response = await this.putIndexRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
