/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ExhibitionListResponse,
  ExhibitionLocalizationRequest,
  ExhibitionLocalizationResponse,
  ExhibitionRequest,
  ExhibitionResponse,
  GetAboutPopulateParameter,
} from '../models';
import {
  ExhibitionListResponseFromJSON,
  ExhibitionListResponseToJSON,
  ExhibitionLocalizationRequestFromJSON,
  ExhibitionLocalizationRequestToJSON,
  ExhibitionLocalizationResponseFromJSON,
  ExhibitionLocalizationResponseToJSON,
  ExhibitionRequestFromJSON,
  ExhibitionRequestToJSON,
  ExhibitionResponseFromJSON,
  ExhibitionResponseToJSON,
  GetAboutPopulateParameterFromJSON,
  GetAboutPopulateParameterToJSON,
} from '../models';

export interface DeleteExhibitionsIdRequest {
  id: number;
}

export interface GetExhibitionsRequest {
  sort?: string;
  paginationWithCount?: boolean;
  paginationPage?: number;
  paginationPageSize?: number;
  paginationStart?: number;
  paginationLimit?: number;
  fields?: string;
  populate?: GetAboutPopulateParameter;
  filters?: object;
  locale?: string;
}

export interface GetExhibitionsIdRequest {
  id: number;
}

export interface PostExhibitionsRequest {
  exhibitionRequest: ExhibitionRequest;
}

export interface PostExhibitionsIdLocalizationsRequest {
  id: number;
  exhibitionLocalizationRequest: ExhibitionLocalizationRequest;
}

export interface PutExhibitionsIdRequest {
  id: number;
  exhibitionRequest: ExhibitionRequest;
}

/**
 *
 */
export class ExhibitionApi extends runtime.BaseAPI {
  /**
   */
  async deleteExhibitionsIdRaw(
    requestParameters: DeleteExhibitionsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteExhibitionsId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/exhibitions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async deleteExhibitionsId(
    requestParameters: DeleteExhibitionsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.deleteExhibitionsIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getExhibitionsRaw(
    requestParameters: GetExhibitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ExhibitionListResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    if (requestParameters.paginationWithCount !== undefined) {
      queryParameters['pagination[withCount]'] = requestParameters.paginationWithCount;
    }

    if (requestParameters.paginationPage !== undefined) {
      queryParameters['pagination[page]'] = requestParameters.paginationPage;
    }

    if (requestParameters.paginationPageSize !== undefined) {
      queryParameters['pagination[pageSize]'] = requestParameters.paginationPageSize;
    }

    if (requestParameters.paginationStart !== undefined) {
      queryParameters['pagination[start]'] = requestParameters.paginationStart;
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination[limit]'] = requestParameters.paginationLimit;
    }

    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields;
    }

    if (requestParameters.populate !== undefined) {
      queryParameters['populate'] = requestParameters.populate;
    }

    if (requestParameters.filters !== undefined) {
      queryParameters['filters'] = requestParameters.filters;
    }

    if (requestParameters.locale !== undefined) {
      queryParameters['locale'] = requestParameters.locale;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/exhibitions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExhibitionListResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getExhibitions(
    requestParameters: GetExhibitionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ExhibitionListResponse> {
    const response = await this.getExhibitionsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getExhibitionsIdRaw(
    requestParameters: GetExhibitionsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ExhibitionResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getExhibitionsId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/exhibitions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExhibitionResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async getExhibitionsId(
    requestParameters: GetExhibitionsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ExhibitionResponse> {
    const response = await this.getExhibitionsIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postExhibitionsRaw(
    requestParameters: PostExhibitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ExhibitionResponse>> {
    if (
      requestParameters.exhibitionRequest === null ||
      requestParameters.exhibitionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'exhibitionRequest',
        'Required parameter requestParameters.exhibitionRequest was null or undefined when calling postExhibitions.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/exhibitions`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ExhibitionRequestToJSON(requestParameters.exhibitionRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExhibitionResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postExhibitions(
    requestParameters: PostExhibitionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ExhibitionResponse> {
    const response = await this.postExhibitionsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async postExhibitionsIdLocalizationsRaw(
    requestParameters: PostExhibitionsIdLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ExhibitionLocalizationResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling postExhibitionsIdLocalizations.'
      );
    }

    if (
      requestParameters.exhibitionLocalizationRequest === null ||
      requestParameters.exhibitionLocalizationRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'exhibitionLocalizationRequest',
        'Required parameter requestParameters.exhibitionLocalizationRequest was null or undefined when calling postExhibitionsIdLocalizations.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/exhibitions/{id}/localizations`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ExhibitionLocalizationRequestToJSON(requestParameters.exhibitionLocalizationRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExhibitionLocalizationResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async postExhibitionsIdLocalizations(
    requestParameters: PostExhibitionsIdLocalizationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ExhibitionLocalizationResponse> {
    const response = await this.postExhibitionsIdLocalizationsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async putExhibitionsIdRaw(
    requestParameters: PutExhibitionsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ExhibitionResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putExhibitionsId.'
      );
    }

    if (
      requestParameters.exhibitionRequest === null ||
      requestParameters.exhibitionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'exhibitionRequest',
        'Required parameter requestParameters.exhibitionRequest was null or undefined when calling putExhibitionsId.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/exhibitions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ExhibitionRequestToJSON(requestParameters.exhibitionRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExhibitionResponseFromJSON(jsonValue)
    );
  }

  /**
   */
  async putExhibitionsId(
    requestParameters: PutExhibitionsIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ExhibitionResponse> {
    const response = await this.putExhibitionsIdRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
