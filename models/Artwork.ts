/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AboutImageDataAttributesFolderDataAttributesParent } from './AboutImageDataAttributesFolderDataAttributesParent';
import {
  AboutImageDataAttributesFolderDataAttributesParentFromJSON,
  AboutImageDataAttributesFolderDataAttributesParentFromJSONTyped,
  AboutImageDataAttributesFolderDataAttributesParentToJSON,
} from './AboutImageDataAttributesFolderDataAttributesParent';
import type { AboutImageDataAttributesRelated } from './AboutImageDataAttributesRelated';
import {
  AboutImageDataAttributesRelatedFromJSON,
  AboutImageDataAttributesRelatedFromJSONTyped,
  AboutImageDataAttributesRelatedToJSON,
} from './AboutImageDataAttributesRelated';
import type { ArtistArtworksDataInnerAttributesMedia } from './ArtistArtworksDataInnerAttributesMedia';
import {
  ArtistArtworksDataInnerAttributesMediaFromJSON,
  ArtistArtworksDataInnerAttributesMediaFromJSONTyped,
  ArtistArtworksDataInnerAttributesMediaToJSON,
} from './ArtistArtworksDataInnerAttributesMedia';
import type { ArtworkArtists } from './ArtworkArtists';
import {
  ArtworkArtistsFromJSON,
  ArtworkArtistsFromJSONTyped,
  ArtworkArtistsToJSON,
} from './ArtworkArtists';
import type { ArtworkLocalizations } from './ArtworkLocalizations';
import {
  ArtworkLocalizationsFromJSON,
  ArtworkLocalizationsFromJSONTyped,
  ArtworkLocalizationsToJSON,
} from './ArtworkLocalizations';

/**
 *
 * @export
 * @interface Artwork
 */
export interface Artwork {
  /**
   *
   * @type {string}
   * @memberof Artwork
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Artwork
   */
  description?: string;
  /**
   *
   * @type {ArtworkArtists}
   * @memberof Artwork
   */
  artists?: ArtworkArtists;
  /**
   *
   * @type {ArtistArtworksDataInnerAttributesMedia}
   * @memberof Artwork
   */
  media?: ArtistArtworksDataInnerAttributesMedia;
  /**
   *
   * @type {Date}
   * @memberof Artwork
   */
  creationDate?: Date;
  /**
   *
   * @type {string}
   * @memberof Artwork
   */
  originalTitle?: string;
  /**
   *
   * @type {string}
   * @memberof Artwork
   */
  handle: string;
  /**
   *
   * @type {AboutImageDataAttributesRelated}
   * @memberof Artwork
   */
  exhibitions?: AboutImageDataAttributesRelated;
  /**
   *
   * @type {Date}
   * @memberof Artwork
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Artwork
   */
  updatedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Artwork
   */
  publishedAt?: Date;
  /**
   *
   * @type {AboutImageDataAttributesFolderDataAttributesParent}
   * @memberof Artwork
   */
  createdBy?: AboutImageDataAttributesFolderDataAttributesParent;
  /**
   *
   * @type {AboutImageDataAttributesFolderDataAttributesParent}
   * @memberof Artwork
   */
  updatedBy?: AboutImageDataAttributesFolderDataAttributesParent;
  /**
   *
   * @type {ArtworkLocalizations}
   * @memberof Artwork
   */
  localizations?: ArtworkLocalizations;
  /**
   *
   * @type {string}
   * @memberof Artwork
   */
  locale?: string;
}

/**
 * Check if a given object implements the Artwork interface.
 */
export function instanceOfArtwork(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'title' in value;
  isInstance = isInstance && 'handle' in value;

  return isInstance;
}

export function ArtworkFromJSON(json: any): Artwork {
  return ArtworkFromJSONTyped(json, false);
}

export function ArtworkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Artwork {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    title: json['title'],
    description: !exists(json, 'description') ? undefined : json['description'],
    artists: !exists(json, 'artists') ? undefined : ArtworkArtistsFromJSON(json['artists']),
    media: !exists(json, 'media')
      ? undefined
      : ArtistArtworksDataInnerAttributesMediaFromJSON(json['media']),
    creationDate: !exists(json, 'creationDate') ? undefined : new Date(json['creationDate']),
    originalTitle: !exists(json, 'originalTitle') ? undefined : json['originalTitle'],
    handle: json['handle'],
    exhibitions: !exists(json, 'exhibitions')
      ? undefined
      : AboutImageDataAttributesRelatedFromJSON(json['exhibitions']),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
    publishedAt: !exists(json, 'publishedAt') ? undefined : new Date(json['publishedAt']),
    createdBy: !exists(json, 'createdBy')
      ? undefined
      : AboutImageDataAttributesFolderDataAttributesParentFromJSON(json['createdBy']),
    updatedBy: !exists(json, 'updatedBy')
      ? undefined
      : AboutImageDataAttributesFolderDataAttributesParentFromJSON(json['updatedBy']),
    localizations: !exists(json, 'localizations')
      ? undefined
      : ArtworkLocalizationsFromJSON(json['localizations']),
    locale: !exists(json, 'locale') ? undefined : json['locale'],
  };
}

export function ArtworkToJSON(value?: Artwork | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    description: value.description,
    artists: ArtworkArtistsToJSON(value.artists),
    media: ArtistArtworksDataInnerAttributesMediaToJSON(value.media),
    creationDate:
      value.creationDate === undefined ? undefined : value.creationDate.toISOString().substr(0, 10),
    originalTitle: value.originalTitle,
    handle: value.handle,
    exhibitions: AboutImageDataAttributesRelatedToJSON(value.exhibitions),
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    publishedAt: value.publishedAt === undefined ? undefined : value.publishedAt.toISOString(),
    createdBy: AboutImageDataAttributesFolderDataAttributesParentToJSON(value.createdBy),
    updatedBy: AboutImageDataAttributesFolderDataAttributesParentToJSON(value.updatedBy),
    localizations: ArtworkLocalizationsToJSON(value.localizations),
    locale: value.locale,
  };
}
