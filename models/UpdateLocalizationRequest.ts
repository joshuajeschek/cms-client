/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface UpdateLocalizationRequest
 */
export interface UpdateLocalizationRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateLocalizationRequest
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateLocalizationRequest
   */
  content?: string;
  /**
   *
   * @type {Date}
   * @memberof UpdateLocalizationRequest
   */
  datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof UpdateLocalizationRequest
   */
  locale: string;
}

/**
 * Check if a given object implements the UpdateLocalizationRequest interface.
 */
export function instanceOfUpdateLocalizationRequest(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'locale' in value;

  return isInstance;
}

export function UpdateLocalizationRequestFromJSON(json: any): UpdateLocalizationRequest {
  return UpdateLocalizationRequestFromJSONTyped(json, false);
}

export function UpdateLocalizationRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UpdateLocalizationRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    title: !exists(json, 'title') ? undefined : json['title'],
    content: !exists(json, 'content') ? undefined : json['content'],
    datetime: !exists(json, 'datetime') ? undefined : new Date(json['datetime']),
    locale: json['locale'],
  };
}

export function UpdateLocalizationRequestToJSON(value?: UpdateLocalizationRequest | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    content: value.content,
    datetime: value.datetime === undefined ? undefined : value.datetime.toISOString(),
    locale: value.locale,
  };
}
