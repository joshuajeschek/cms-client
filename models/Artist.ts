/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AboutImageDataAttributesFolderDataAttributesParent } from './AboutImageDataAttributesFolderDataAttributesParent';
import {
  AboutImageDataAttributesFolderDataAttributesParentFromJSON,
  AboutImageDataAttributesFolderDataAttributesParentFromJSONTyped,
  AboutImageDataAttributesFolderDataAttributesParentToJSON,
} from './AboutImageDataAttributesFolderDataAttributesParent';
import type { ArtistArtworks } from './ArtistArtworks';
import {
  ArtistArtworksFromJSON,
  ArtistArtworksFromJSONTyped,
  ArtistArtworksToJSON,
} from './ArtistArtworks';
import type { ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover } from './ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover';
import {
  ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverFromJSON,
  ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverFromJSONTyped,
  ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverToJSON,
} from './ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover';
import type { ArtistLocalizations } from './ArtistLocalizations';
import {
  ArtistLocalizationsFromJSON,
  ArtistLocalizationsFromJSONTyped,
  ArtistLocalizationsToJSON,
} from './ArtistLocalizations';
import type { ContactLinkComponent } from './ContactLinkComponent';
import {
  ContactLinkComponentFromJSON,
  ContactLinkComponentFromJSONTyped,
  ContactLinkComponentToJSON,
} from './ContactLinkComponent';

/**
 *
 * @export
 * @interface Artist
 */
export interface Artist {
  /**
   *
   * @type {string}
   * @memberof Artist
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Artist
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof Artist
   */
  handle: string;
  /**
   *
   * @type {ArtistArtworks}
   * @memberof Artist
   */
  artworks?: ArtistArtworks;
  /**
   *
   * @type {ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover}
   * @memberof Artist
   */
  picture?: ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover;
  /**
   *
   * @type {Date}
   * @memberof Artist
   */
  birthday?: Date;
  /**
   *
   * @type {Array<ContactLinkComponent>}
   * @memberof Artist
   */
  contact?: Array<ContactLinkComponent>;
  /**
   *
   * @type {Date}
   * @memberof Artist
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Artist
   */
  updatedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Artist
   */
  publishedAt?: Date;
  /**
   *
   * @type {AboutImageDataAttributesFolderDataAttributesParent}
   * @memberof Artist
   */
  createdBy?: AboutImageDataAttributesFolderDataAttributesParent;
  /**
   *
   * @type {AboutImageDataAttributesFolderDataAttributesParent}
   * @memberof Artist
   */
  updatedBy?: AboutImageDataAttributesFolderDataAttributesParent;
  /**
   *
   * @type {ArtistLocalizations}
   * @memberof Artist
   */
  localizations?: ArtistLocalizations;
  /**
   *
   * @type {string}
   * @memberof Artist
   */
  locale?: string;
}

/**
 * Check if a given object implements the Artist interface.
 */
export function instanceOfArtist(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'handle' in value;

  return isInstance;
}

export function ArtistFromJSON(json: any): Artist {
  return ArtistFromJSONTyped(json, false);
}

export function ArtistFromJSONTyped(json: any, ignoreDiscriminator: boolean): Artist {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    bio: !exists(json, 'bio') ? undefined : json['bio'],
    handle: json['handle'],
    artworks: !exists(json, 'artworks') ? undefined : ArtistArtworksFromJSON(json['artworks']),
    picture: !exists(json, 'picture')
      ? undefined
      : ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverFromJSON(
          json['picture']
        ),
    birthday: !exists(json, 'birthday') ? undefined : new Date(json['birthday']),
    contact: !exists(json, 'contact')
      ? undefined
      : (json['contact'] as Array<any>).map(ContactLinkComponentFromJSON),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
    publishedAt: !exists(json, 'publishedAt') ? undefined : new Date(json['publishedAt']),
    createdBy: !exists(json, 'createdBy')
      ? undefined
      : AboutImageDataAttributesFolderDataAttributesParentFromJSON(json['createdBy']),
    updatedBy: !exists(json, 'updatedBy')
      ? undefined
      : AboutImageDataAttributesFolderDataAttributesParentFromJSON(json['updatedBy']),
    localizations: !exists(json, 'localizations')
      ? undefined
      : ArtistLocalizationsFromJSON(json['localizations']),
    locale: !exists(json, 'locale') ? undefined : json['locale'],
  };
}

export function ArtistToJSON(value?: Artist | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    bio: value.bio,
    handle: value.handle,
    artworks: ArtistArtworksToJSON(value.artworks),
    picture: ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverToJSON(
      value.picture
    ),
    birthday: value.birthday === undefined ? undefined : value.birthday.toISOString().substr(0, 10),
    contact:
      value.contact === undefined
        ? undefined
        : (value.contact as Array<any>).map(ContactLinkComponentToJSON),
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    publishedAt: value.publishedAt === undefined ? undefined : value.publishedAt.toISOString(),
    createdBy: AboutImageDataAttributesFolderDataAttributesParentToJSON(value.createdBy),
    updatedBy: AboutImageDataAttributesFolderDataAttributesParentToJSON(value.updatedBy),
    localizations: ArtistLocalizationsToJSON(value.localizations),
    locale: value.locale,
  };
}
