/* tslint:disable */
/* eslint-disable */
/**
 * zwischenwelten API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@jeschek.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AboutImageDataAttributesFolderDataAttributesParent } from './AboutImageDataAttributesFolderDataAttributesParent';
import {
  AboutImageDataAttributesFolderDataAttributesParentFromJSON,
  AboutImageDataAttributesFolderDataAttributesParentFromJSONTyped,
  AboutImageDataAttributesFolderDataAttributesParentToJSON,
} from './AboutImageDataAttributesFolderDataAttributesParent';
import type { ArtistArtworks } from './ArtistArtworks';
import {
  ArtistArtworksFromJSON,
  ArtistArtworksFromJSONTyped,
  ArtistArtworksToJSON,
} from './ArtistArtworks';
import type { ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover } from './ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover';
import {
  ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverFromJSON,
  ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverFromJSONTyped,
  ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverToJSON,
} from './ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover';
import type { ExhibitionLocalizations } from './ExhibitionLocalizations';
import {
  ExhibitionLocalizationsFromJSON,
  ExhibitionLocalizationsFromJSONTyped,
  ExhibitionLocalizationsToJSON,
} from './ExhibitionLocalizations';

/**
 *
 * @export
 * @interface Exhibition
 */
export interface Exhibition {
  /**
   *
   * @type {string}
   * @memberof Exhibition
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Exhibition
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Exhibition
   */
  handle: string;
  /**
   *
   * @type {ArtistArtworks}
   * @memberof Exhibition
   */
  artworks?: ArtistArtworks;
  /**
   *
   * @type {ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover}
   * @memberof Exhibition
   */
  cover?: ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCover;
  /**
   *
   * @type {Date}
   * @memberof Exhibition
   */
  launch?: Date;
  /**
   *
   * @type {Date}
   * @memberof Exhibition
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Exhibition
   */
  updatedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Exhibition
   */
  publishedAt?: Date;
  /**
   *
   * @type {AboutImageDataAttributesFolderDataAttributesParent}
   * @memberof Exhibition
   */
  createdBy?: AboutImageDataAttributesFolderDataAttributesParent;
  /**
   *
   * @type {AboutImageDataAttributesFolderDataAttributesParent}
   * @memberof Exhibition
   */
  updatedBy?: AboutImageDataAttributesFolderDataAttributesParent;
  /**
   *
   * @type {ExhibitionLocalizations}
   * @memberof Exhibition
   */
  localizations?: ExhibitionLocalizations;
  /**
   *
   * @type {string}
   * @memberof Exhibition
   */
  locale?: string;
}

/**
 * Check if a given object implements the Exhibition interface.
 */
export function instanceOfExhibition(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'title' in value;
  isInstance = isInstance && 'handle' in value;

  return isInstance;
}

export function ExhibitionFromJSON(json: any): Exhibition {
  return ExhibitionFromJSONTyped(json, false);
}

export function ExhibitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Exhibition {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    title: json['title'],
    description: !exists(json, 'description') ? undefined : json['description'],
    handle: json['handle'],
    artworks: !exists(json, 'artworks') ? undefined : ArtistArtworksFromJSON(json['artworks']),
    cover: !exists(json, 'cover')
      ? undefined
      : ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverFromJSON(json['cover']),
    launch: !exists(json, 'launch') ? undefined : new Date(json['launch']),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
    publishedAt: !exists(json, 'publishedAt') ? undefined : new Date(json['publishedAt']),
    createdBy: !exists(json, 'createdBy')
      ? undefined
      : AboutImageDataAttributesFolderDataAttributesParentFromJSON(json['createdBy']),
    updatedBy: !exists(json, 'updatedBy')
      ? undefined
      : AboutImageDataAttributesFolderDataAttributesParentFromJSON(json['updatedBy']),
    localizations: !exists(json, 'localizations')
      ? undefined
      : ExhibitionLocalizationsFromJSON(json['localizations']),
    locale: !exists(json, 'locale') ? undefined : json['locale'],
  };
}

export function ExhibitionToJSON(value?: Exhibition | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    description: value.description,
    handle: value.handle,
    artworks: ArtistArtworksToJSON(value.artworks),
    cover: ArtistArtworksDataInnerAttributesExhibitionsDataInnerAttributesCoverToJSON(value.cover),
    launch: value.launch === undefined ? undefined : value.launch.toISOString(),
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    publishedAt: value.publishedAt === undefined ? undefined : value.publishedAt.toISOString(),
    createdBy: AboutImageDataAttributesFolderDataAttributesParentToJSON(value.createdBy),
    updatedBy: AboutImageDataAttributesFolderDataAttributesParentToJSON(value.updatedBy),
    localizations: ExhibitionLocalizationsToJSON(value.localizations),
    locale: value.locale,
  };
}
